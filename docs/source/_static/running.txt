======================
Running an application
======================

There are two ways of using sdgen:

------------------------------
Running from installed script
------------------------------

After installing sdgen, there should be available `sdgen` script in your system.

.. code-block:: bash

	usage: sdgen [-h] [--config CONFIG_FILE] [--overwrite] [--format {svg,png}]
	             input output

	Generate syntax diagram.

	positional arguments:
	  input                 data file in JSON format
	  output                path to output directory

	optional arguments:
	  -h, --help            show this help message and exit
	  --config CONFIG_FILE  config file in json format
	  --overwrite           overwrite existing output files
	  --format {svg,png}    output format, ex. "png"


Example usage
++++++++++++++

.. code-block:: bash

	sdgen input1.json output_dir/ --config=config.json --format=png --overwrite

---------------------
Import python module
---------------------

Sdgen can be used directly from python. To do this, import sdgen and use to_png or to_svg function provided by it.

Sdgen to_png and to_svg function returns list of tuples. Each tuple contains two values: image name and generated image.

Example usage
+++++++++++++

.. code-block:: python

	#!/usr/bin/python
	# -*- coding: utf-8 -*-
	import sdgen


	def main():
	    data = {
	        "view": "Terminal",
	        "name": "Terminal marked example",
	        "value": u"Zażółć gęślą jaźń",
	        "mark": "yes"
	    }
	    conf = {
	        "terminal": {
	            "padding": 8
	        }
	    }
	    images = sdgen.to_png(data, conf=conf)
	    return images

	if __name__ == '__main__':
	    main()
